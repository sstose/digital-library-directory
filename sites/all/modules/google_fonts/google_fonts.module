<?php

/**
 * @file
 * This module enables Google Fonts on your website.
 *
 * This module enables you to load fonts from the Google Fonts API
 * within your website. After selecting which fonts you want to use 
 * they will become available as working font-families in your CSS.
 */

/**
 * Implements hook_menu().
 */
function google_fonts_menu() {
  $items = array();

  $items['admin/settings/google_fonts'] = array(
    'title' => 'Google Fonts',
    'description' => 'Select the Google Fonts to use.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_fonts_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'google_fonts.admin.inc',
  );
  
  $items['admin/settings/google_fonts/update'] = array(
    'title' => 'Update Google Fonts list',
    'page callback' => '_google_fonts_update_font_list',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function google_fonts_init() {

  // Check if Google Fonts array has been converted yet
  $google_fonts_version = db_result(db_query("SELECT schema_version FROM {system} WHERE name = '%s'", 'google_fonts'));
  if ($google_fonts_version && $google_fonts_version < 6100 && user_access('administer software updates')) {
    drupal_set_message(t('You need to run the <a href="@link">update script</a> to perform required database updates.', array('@link' => url('update.php'))), 'error');
    return;
  }
  
  // Load the CSS code added by the user
  _google_fonts_add_custom_css();
  
  // We don't need to load the fonts twice as the admin interface
  // loads ALL fonts by default already
  if ($_GET['q'] == 'admin/settings/google_fonts') {
    return;
  }
  
  $fonts_to_load = array();
  $enabled_fonts = variable_get('google_fonts_enabled_fonts', array());
  
  foreach ($enabled_fonts as $font) { 
    $variants = isset($font['variants']) ? $font['variants'] : NULL;
    $subsets = isset($font['subsets']) ? $font['subsets'] : NULL;
    $fonts_to_load[] = _google_fonts_family_pathname($font['family'], $variants, $subsets);
  }
  if (!empty($fonts_to_load)) {
    _google_fonts_load_css($fonts_to_load, 1);
  }
}

function _google_fonts_add_custom_css() {
  // Now add it to the list of CSS files to be loaded
  drupal_add_css(_google_fonts_cache_css(variable_get("google_fonts_css_contents", NULL)), 'theme');
}

/**
 * Add the CSS include to the HEAD of the page
 */
function _google_fonts_load_css($fonts_to_load, $chunksize = 15) {
  $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';
  
  $chunks = array_chunk($fonts_to_load, $chunksize);
  foreach ($chunks as $chunk) {
    drupal_add_link(array('type' => 'text/css', 'rel' => 'stylesheet', 'href' => $protocol . '://fonts.googleapis.com/css?family=' . implode('|', $chunk)));
  }
}

/**
 * Provides all needed details about Google fonts.
 * Thanks at @sreynen to provide this array in his @font-your-face module
 */
function _google_fonts_available_fonts($reset = FALSE) {
  $fontsbuffer = variable_get('google_fonts_webfonts', array());
  if (empty($fontsbuffer) || $reset) {
    // Return the JSON object with all available fonts
    // For now, it uses my (BarisW) API key
    
    // This key is limited to 10.000 requests per day, which should
    // be sufficient as it is only used when selecting fonts in the
    // admin interface. After that, it's cached in Drupal.
    $result = drupal_http_request('https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBgeqKlFdYj3Y7VwmrEXnXzpnx5TfKXG4o');
    if ($result->code != 200) {
      drupal_set_message(t('The list of Google Fonts could not be fetched. Verify that your server can connect the Google Servers (https://www.googleapis.com). Error: %error', array('%error' => $result->error)), 'error');
    }
    elseif (isset($result->data)) {
      $fontsbuffer = json_decode($result->data);
      variable_set('google_fonts_webfonts', $fontsbuffer->items);
    }
  }
  
  return $fontsbuffer;
}

/**
 * Trigger to reset the locally stored variable and fetch a new font list
 */
function _google_fonts_update_font_list() {
  $fonts = _google_fonts_available_fonts(TRUE);
  if (!empty($fonts)) {
    drupal_set_message(t('A new list of fonts have been fetched.'));
  }
  drupal_goto('admin/settings/google_fonts');
}

/**
 * Format the font name as saved in the database (underscores instead of spaces)
 */
function _google_fonts_system_fontname($string) {
  return str_replace(' ', '_', $string);
}

function _google_fonts_family_pathname($family, $variants = NULL, $subset = NULL) {
  $string = str_replace(' ', '+', $family);
  
  if ($variants) {
    if (sizeof($variants) == 1 && isset($variants['regular'])) {
      unset($variants['regular']);
    }
    if ($variants) {
      $string .= ':' . implode(',', $variants);
    }
  }
  
  // for latin, we don't need to declare a subset. 
  if ($subset && $subset != 'latin') {
    $string .= '&subset=' . $subset;
  }
  
  return $string;
}

function _google_fonts_family_array_key_encode($string) {
  return str_replace(' ', '_', $string);
}

function _google_fonts_family_array_key_decode($string) {
  $string = str_replace('__', ':', $string);
  $string = str_replace('_', ' ', $string);
  return $string;
}

/**
 * Return the path of this font
 * If it is a child font of a larger family, scan the array to determine its path
 */
function _google_fonts_get_font_info($font, $full_font = '') {
  $available_fonts = _google_fonts_available_fonts();
    
  if (empty($full_font)) {
    $full_font = $font;
  }
  if (isset($available_fonts[$font]['fonts'])) {
    if (isset($available_fonts[$font]['fonts'][$full_font])) {
      return $available_fonts[$font]['fonts'][$full_font];
    }
    else {
      return $available_fonts[$font];
    }
  }
  else{
    // Try the string without the last word to determine the parent
    $font = substr($font, 0, strrpos($font, " "));
    return _google_fonts_get_font_info($font, $full_font);
  }
}

/**
 * Filter function to filter out the disabled Google Fonts.
 */
function _google_fonts_filter_enabled_fonts($value) {
  if ($value == '0') {
    return FALSE;
  }
  return TRUE;
}

/**
 * Create the CSS file and store it locally.
 */
function _google_fonts_cache_css($file_contents, $reset = FALSE) {
  $directory = file_directory_path() .'/google_fonts';
  $file_destination = $directory .'/google_fonts.css';
  if (!file_exists($file_destination) || $reset) {
    // Check that the files directory is writable
    if (file_check_directory($directory, FILE_CREATE_DIRECTORY)) {
      cache_clear_all();
      return file_save_data($file_contents, $file_destination, FILE_EXISTS_REPLACE);
    }
  }
  else {
    return $file_destination;
  }
}